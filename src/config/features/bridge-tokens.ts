import { EvmChainId } from "../../chain/evm/id.js";
import { Token } from "../../currency/index.js";

// POS Bridge supported tokens for Shibarium
export const POS_BRIDGE_TOKENS: Record<EvmChainId, Token[]> = {
  [EvmChainId.ETHEREUM]: [],
  [EvmChainId.GÃ–RLI]: [],
  [EvmChainId.POLYGON]: [],
  [EvmChainId.POLYGON_TESTNET]: [],
  [EvmChainId.FANTOM]: [],
  [EvmChainId.FANTOM_TESTNET]: [],
  [EvmChainId.GNOSIS]: [],
  [EvmChainId.BSC]: [],
  [EvmChainId.BSC_TESTNET]: [],
  [EvmChainId.ARBITRUM]: [],
  [EvmChainId.ARBITRUM_NOVA]: [],
  [EvmChainId.ARBITRUM_TESTNET]: [],
  [EvmChainId.AVALANCHE]: [],
  [EvmChainId.AVALANCHE_TESTNET]: [],
  [EvmChainId.HECO]: [],
  [EvmChainId.HARMONY]: [],
  [EvmChainId.OKEX]: [],
  [EvmChainId.CELO]: [],
  [EvmChainId.PALM]: [],
  [EvmChainId.MOONRIVER]: [],
  [EvmChainId.FUSE]: [],
  [EvmChainId.TELOS]: [],
  [EvmChainId.MOONBEAM]: [],
  [EvmChainId.OPTIMISM]: [],
  [EvmChainId.KAVA]: [],
  [EvmChainId.METIS]: [],
  [EvmChainId.BOBA]: [],
  [EvmChainId.BOBA_AVAX]: [],
  [EvmChainId.BOBA_BNB]: [],
  [EvmChainId.BTTC]: [],
  [EvmChainId.POLYGON_ZKEVM]: [],
  [EvmChainId.THUNDERCORE]: [],
  [EvmChainId.FILECOIN]: [],
  [EvmChainId.HAQQ]: [],
  [EvmChainId.CORE]: [],
  [EvmChainId.ZKSYNC_ERA]: [],
  [EvmChainId.LINEA]: [],
  [EvmChainId.BASE]: [],
  [EvmChainId.SCROLL]: [],
  [EvmChainId.ZETACHAIN]: [],
  [EvmChainId.CRONOS]: [],
  [EvmChainId.BLAST]: [],
  [EvmChainId.SKALE_EUROPA]: [],
  [EvmChainId.ROOTSTOCK]: [],
  [EvmChainId.MANTLE]: [],
  [EvmChainId.CURTIS]: [],
  [EvmChainId.MANTA]: [],
  [EvmChainId.MODE]: [],
  [EvmChainId.TAIKO]: [],
  [EvmChainId.ZKLINK]: [],
  [EvmChainId.APE]: [],
  [EvmChainId.SONIC]: [],
  [EvmChainId.HEMI]: [],
  [EvmChainId.SEPOLIA]: [],
  [EvmChainId.SHIBARIUM]: [
    new Token({
      chainId: EvmChainId.SHIBARIUM,
      address: "0x0000000000000000000000000000000000001010",
      decimals: 18,
      symbol: "BONE",
      name: "Bone Token",
    }),
    new Token({
      chainId: EvmChainId.SHIBARIUM,
      address: "0x495eea66b0f8b636d441dc6a98d8f5c3d455c4c0",
      decimals: 18,
      symbol: "SHIB",
      name: "SHIBA INU",
    }),
    new Token({
      chainId: EvmChainId.SHIBARIUM,
      address: "0x65218a41fb92637254b4f8c97448d3df343a3064",
      decimals: 18,
      symbol: "LEASH",
      name: "DOGE KILLER",
    }),
    new Token({
      chainId: EvmChainId.SHIBARIUM,
      address: "0x8ed7d143ef452316ab1123d28ab302dc3b80d3ce",
      decimals: 18,
      symbol: "WETH",
      name: "Wrapped Ether",
    }),
    new Token({
      chainId: EvmChainId.SHIBARIUM,
      address: "0x89dc93c6c12cae47acaf4ad9305d7a442c30dbb2",
      decimals: 9,
      symbol: "xFUND",
      name: "unification.com/xfund",
    }),
    new Token({
      chainId: EvmChainId.SHIBARIUM,
      address: "0xab082b8ad96c7f47ed70ed971ce2116469954cfb",
      decimals: 6,
      symbol: "USDT",
      name: "Tether USD",
    }),
    new Token({
      chainId: EvmChainId.SHIBARIUM,
      address: "0xf010f12dca0b96d2d6685bf4db3dbb4ad500b6ad",
      decimals: 6,
      symbol: "USDC",
      name: "USD Coin",
    }),
    new Token({
      chainId: EvmChainId.SHIBARIUM,
      address: "0x0726959d22361b79e4d50a5d157b044a83ec870d",
      decimals: 18,
      symbol: "DAI",
      name: "Dai Stablecoin",
    }),
    new Token({
      chainId: EvmChainId.SHIBARIUM,
      address: "0xe984d89fb00d0b44e798a55dc41ea598b0b0899d",
      decimals: 8,
      symbol: "WBTC",
      name: "Wrapped BTC",
    }),
    new Token({
      chainId: EvmChainId.SHIBARIUM,
      address: "0x91fbb2503ac69702061f1ac6885759fc853e6eae",
      decimals: 18,
      symbol: "KNINE",
      name: "K9 Finance DAO",
    }),
    new Token({
      chainId: EvmChainId.SHIBARIUM,
      address: "0xada0fa1f9a4ea8513b3b607efd31792336c09507",
      decimals: 9,
      symbol: "FUND",
      name: "Unification",
    }),
    new Token({
      chainId: EvmChainId.SHIBARIUM,
      address: "0xef99cd3e619c058658043f8775ed9077105d8581",
      decimals: 18,
      symbol: "BAD",
      name: "BAD IDEA AI",
    }),
    new Token({
      chainId: EvmChainId.SHIBARIUM,
      address: "0xc476e20c2f7fa3b35ac242abe71b59e902242f06",
      decimals: 18,
      symbol: "DERC721",
      name: "Dummy ERC721",
    }),
    new Token({
      chainId: EvmChainId.SHIBARIUM,
      address: "0x0c7245d5aaf71aa19b310ad65599b8e36501185c",
      decimals: 18,
      symbol: "SBSH",
      name: "SHIBOSHIS",
    }),
    new Token({
      chainId: EvmChainId.SHIBARIUM,
      address: "0x2ace8fab52842beda0713282d96c683fbe00ff89",
      decimals: 18,
      symbol: "LTD",
      name: "LivingTheDream",
    }),
    new Token({
      chainId: EvmChainId.SHIBARIUM,
      address: "0x95e9f2bf576dba036a38e9659167788b518e56bb",
      decimals: 18,
      symbol: "SHIFU",
      name: "Shifu",
    }),
    new Token({
      chainId: EvmChainId.SHIBARIUM,
      address: "0x52e21141a90e512295cbe842fae607d53006c138",
      decimals: 18,
      symbol: "SHIBYARD",
      name: "SHIB YARD",
    }),
    new Token({
      chainId: EvmChainId.SHIBARIUM,
      address: "0x506d8d2d9c715eb34f514cc3ef48c7abd19e2bc7",
      decimals: 18,
      symbol: "TREAT",
      name: "Shiba Inu Treat",
    }),
    new Token({
      chainId: EvmChainId.SHIBARIUM,
      address: "0xd1cb43c9d1859e57057770cb9ed0398736ad9d6f",
      decimals: 18,
      symbol: "$ROAR",
      name: "Roaring Kitty",
    }),
    new Token({
      chainId: EvmChainId.SHIBARIUM,
      address: "0xdf2fd7930c36ad74fa04cae24c12b522c8de05f6",
      decimals: 18,
      symbol: "ESTEE",
      name: "ESTEE",
    }),
    new Token({
      chainId: EvmChainId.SHIBARIUM,
      address: "0x8a3ac07f54d8766458bb24efbbbb085fe0fe6eba",
      decimals: 18,
      symbol: "ISHI",
      name: "Ishi",
    }),
    new Token({
      chainId: EvmChainId.SHIBARIUM,
      address: "0x0e56b8f632215053c6fb214b14a294372195760f",
      decimals: 18,
      symbol: "OSCAR",
      name: "Oscar",
    }),
  ],
  [EvmChainId.PUPPYNET]: [],
};

// Helper function to check if a token is supported by POS bridge
export function isPOSBridgeToken(
  chainId: EvmChainId,
  tokenAddress: string
): boolean {
  return POS_BRIDGE_TOKENS[chainId].some(
    (token) => token.address.toLowerCase() === tokenAddress.toLowerCase()
  );
}
